# -*- coding: utf-8 -*-
"""SourceCodeFruitsclassification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16zDyt_HQUpkCc-jTGlPyD8F2RQEviLgS
"""

# 1. Setup and Data Loading
#-------------------------------------------------------------------------------
import os
import zipfile
import shutil
import tensorflow as tf
from tensorflow.keras.preprocessing import image_dataset_from_directory
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.layers import RandomFlip, RandomRotation, RandomZoom
from tensorflow.keras.applications import ResNet50
from sklearn.metrics import classification_report, confusion_matrix
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import drive

# Mount Google Drive to access the dataset
drive.mount('/content/drive')

# Define the path to your zip file on Google Drive
# Make sure this path is correct based on where you saved the file
zip_path = '/content/drive/My Drive/fruits.zip'
extract_path = '/content/fruits_data/'

# Check if the zip file exists before proceeding
if not os.path.exists(zip_path):
    raise FileNotFoundError(f"Could not find the zip file at: {zip_path}. Please check the path and try again.")

# Create the extraction directory
os.makedirs(extract_path, exist_ok=True)

# Unzip the dataset
print(f"Unzipping '{zip_path}'...")
with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)
print("Unzipping complete.")

# Dynamically find the correct base directory containing the 'Training' and 'Test' folders
base_path = None
for root, dirs, files in os.walk(extract_path):
    if 'Training' in dirs and 'Test' in dirs:
        base_path = root
        break

if not base_path:
    raise FileNotFoundError("Could not find 'Training' and 'Test' directories inside the zip file.")

# Define dataset paths
train_path = os.path.join(base_path, 'Training')
test_path = os.path.join(base_path, 'Test')

print("Using Training directory:", train_path)
print("Using Test directory:", test_path)

# Get the list of class names (fruits)
class_names = sorted(os.listdir(train_path))
num_classes = len(class_names)
print(f"Number of classes: {num_classes}")

# 2. Data Preparation with Augmentation
#-------------------------------------------------------------------------------
IMG_SIZE = 100
BATCH_SIZE = 32

data_augmentation = Sequential([
    RandomFlip("horizontal_and_vertical"),
    RandomRotation(0.2),
    RandomZoom(0.2),
], name="data_augmentation")

train_ds = image_dataset_from_directory(
    train_path,
    labels='inferred',
    label_mode='int',
    image_size=(IMG_SIZE, IMG_SIZE),
    batch_size=BATCH_SIZE,
    shuffle=True
)

test_ds = image_dataset_from_directory(
    test_path,
    labels='inferred',
    label_mode='int',
    image_size=(IMG_SIZE, IMG_SIZE),
    batch_size=BATCH_SIZE,
    shuffle=False
)

def apply_augmentation(image, label):
    return data_augmentation(image, training=True), label

augmented_train_ds = train_ds.map(apply_augmentation)

# 3. Model Building with Transfer Learning (ResNet50)
#-------------------------------------------------------------------------------
base_model = ResNet50(weights='imagenet', include_top=False, input_shape=(IMG_SIZE, IMG_SIZE, 3))
base_model.trainable = False

model = Sequential([
    base_model,
    Flatten(),
    Dense(512, activation='relu'),
    Dense(num_classes, activation='softmax')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.summary()

# 4. Model Training
#-------------------------------------------------------------------------------
EPOCHS = 5
print("\nStarting model training...")
history = model.fit(
    augmented_train_ds,
    validation_data=test_ds,
    epochs=EPOCHS
)
print("Model training finished.")

# 5. Model Evaluation
#-------------------------------------------------------------------------------
print("\nâœ… Generating Model Evaluation Metrics:")
y_true = np.concatenate([y for x, y in test_ds], axis=0)
y_pred_probs = model.predict(test_ds)
y_pred = np.argmax(y_pred_probs, axis=1)

print(classification_report(y_true, y_pred, target_names=class_names))

cm = confusion_matrix(y_true, y_pred)
plt.figure(figsize=(25, 25))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=class_names, yticklabels=class_names)
plt.title('Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()

# 6. Real-time Inference Function
#-------------------------------------------------------------------------------
def real_time_inference(image_path):
    img = tf.keras.utils.load_img(image_path, target_size=(IMG_SIZE, IMG_SIZE))
    img_array = tf.keras.utils.img_to_array(img)
    img_array = tf.expand_dims(img_array, 0)

    predictions = model.predict(img_array)
    score = tf.nn.softmax(predictions[0])
    predicted_class = class_names[np.argmax(score)]
    confidence = 100 * np.max(score)

    return predicted_class, confidence

# Example usage of the inference function
example_image_path = os.path.join(test_path, 'Apple Red 1', '33_100.jpg')
predicted_class, confidence = real_time_inference(example_image_path)
print(f"\nExample Inference:")
print(f"The image is a {predicted_class} with a confidence of {confidence:.2f}%.")

# 7. Saving the Trained Model
#-------------------------------------------------------------------------------
model_save_path = 'fruit_classifier_model.keras'
model.save(model_save_path)
print(f"\nModel saved successfully to {model_save_path}")

#Example
import tensorflow as tf
import numpy as np
import os
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Flatten, Dense
from PIL import Image

# 1. Simulate a Trained Model
# We'll create a simple dummy model with two "fruit classes"
print("Setting up a simple example model...")

# Define our simplified classes
class_names = ['Apple', 'Banana']

# Create a very simple model (this is not the real ResNet50 model)
model = Sequential([
    Flatten(input_shape=(100, 100, 3)),
    Dense(1, activation='sigmoid') # Simple output for 2 classes
])

# Dummy model weights (so it can run a prediction)
model.set_weights([
    np.random.rand(30000, 1),
    np.random.rand(1)
])

# 2. Real-time Inference Function
# This is the function you created, simplified for the demo.
def real_time_inference(image_path):
    """Loads an image and performs a prediction using the simulated model."""
    img = tf.keras.utils.load_img(image_path, target_size=(100, 100))
    img_array = tf.keras.utils.img_to_array(img)
    img_array = tf.expand_dims(img_array, 0) # Create a batch

    predictions = model.predict(img_array)

    # Convert the prediction score to a class and a confidence
    # For this simple model, we'll use a threshold
    if predictions[0] > 0.5:
        predicted_class = class_names[1]  # Banana
        confidence = 100 * predictions[0][0]
    else:
        predicted_class = class_names[0]  # Apple
        confidence = 100 * (1 - predictions[0][0])

    return predicted_class, confidence

# 3. Create a Dummy Test Image
# We'll create a simple black image file to test the function.
dummy_image_path = 'dummy_apple.jpg'
dummy_image = Image.new('RGB', (100, 100), color = 'red')
dummy_image.save(dummy_image_path)
print(f"Dummy image '{dummy_image_path}' created successfully.")

# 4. Run the Prediction and Print the Output
print("\nRunning a simple prediction...")
predicted_class, confidence = real_time_inference(dummy_image_path)

print("\nExample Inference:")
print(f"The image is a '{predicted_class}' with a confidence of {confidence:.2f}%.")

# Clean up the dummy image file
os.remove(dummy_image_path)

import matplotlib.pyplot as plt
import numpy as np

# 1. Simulate a simple image (e.g., a red fruit)
# This creates a 100x100 pixel image that is entirely red.
image = np.zeros((100, 100, 3), dtype=np.uint8)
image[:, :, 0] = 255  # Set the Red channel to max (255)
image_label = "Apple"

# 2. Display the image
print(f"Generating an image of a '{image_label}'...")
plt.imshow(image)
plt.title(f"Example of a {image_label}")
plt.axis('off')  # Hide the axes for a cleaner look
plt.show()

# 3. Print a simple result
print(f"\nExample Prediction:")
print(f"The image is a {image_label} with a high confidence.")

import matplotlib.pyplot as plt
import numpy as np

# 1. Simulate a simple image (e.g., a yellow fruit)
# This creates a 100x100 pixel image that is entirely yellow.
image = np.zeros((100, 100, 3), dtype=np.uint8)
image[:, :, 0] = 255  # Set the Red channel to max (255)
image[:, :, 1] = 255  # Set the Green channel to max (255)
# Blue channel remains 0, creating a yellow color.
image_label = "Banana"

# 2. Display the image
print(f"Generating an image of a '{image_label}'...")
plt.imshow(image)
plt.title(f"Example of a {image_label}")
plt.axis('off')  # Hide the axes for a cleaner look
plt.show()

# 3. Print a simple result
print(f"\nExample Prediction:")
print(f"The image is a {image_label} with a high confidence.")

import matplotlib.pyplot as plt
import numpy as np

# 1. Simulate a simple image (e.g., a green fruit)
# This creates a 100x100 pixel image that is entirely green.
image = np.zeros((100, 100, 3), dtype=np.uint8)
image[:, :, 1] = 255  # Set the Green channel to max (255)
image_label = "Kiwi"

# 2. Display the image
print(f"Generating an image of a '{image_label}'...")
plt.imshow(image)
plt.title(f"Example of a {image_label}")
plt.axis('off')  # Hide the axes for a cleaner look
plt.show()

# 3. Print a simple result
print(f"\nExample Prediction:")
print(f"The image is a {image_label} with a high confidence.")

import matplotlib.pyplot as plt
import numpy as np

# 1. Simulate a simple image (e.g., a magenta fruit)
# This creates a 100x100 pixel image that is entirely magenta.
image = np.zeros((100, 100, 3), dtype=np.uint8)
image[:, :, 0] = 255  # Set the Red channel to max (255)
image[:, :, 2] = 255  # Set the Blue channel to max (255)
# Green channel remains 0, creating a magenta color.
image_label = "Dragon Fruit"

# 2. Display the image
print(f"Generating an image of a '{image_label}'...")
plt.imshow(image)
plt.title(f"Example of a {image_label}")
plt.axis('off')  # Hide the axes for a cleaner look
plt.show()

# 3. Print a simple result
print(f"\nExample Prediction:")
print(f"The image is a {image_label} with a high confidence.")

import matplotlib.pyplot as plt
import numpy as np

# 1. Simulate a simple image (e.g., a blue fruit)
# This creates a 100x100 pixel image that is entirely blue.
image = np.zeros((100, 100, 3), dtype=np.uint8)
image[:, :, 2] = 255  # Set the Blue channel to max (255)
image_label = "Blueberry"

# 2. Display the image
print(f"Generating an image of a '{image_label}'...")
plt.imshow(image)
plt.title(f"Example of a {image_label}")
plt.axis('off')  # Hide the axes for a cleaner look
plt.show()

# 3. Print a simple result
print(f"\nExample Prediction:")
print(f"The image is a {image_label} with a high confidence.")

import matplotlib.pyplot as plt
import numpy as np

# 1. Simulate a simple image (e.g., an orange-yellow fruit)
# This creates a 100x100 pixel image that is orange-yellow.
image = np.zeros((100, 100, 3), dtype=np.uint8)
image[:, :, 0] = 255  # Set the Red channel to max (255)
image[:, :, 1] = 215  # Set the Green channel to a medium value
# Blue channel remains 0, creating an orange color.
image_label = "Mango"

# 2. Display the image
print(f"Generating an image of a '{image_label}'...")
plt.imshow(image)
plt.title(f"Example of a {image_label}")
plt.axis('off')  # Hide the axes for a cleaner look
plt.show()

# 3. Print a simple result
print(f"\nExample Prediction:")
print(f"The image is a {image_label} with a high confidence.")

import matplotlib.pyplot as plt
import numpy as np

# 1. Simulate a simple image (e.g., a brownish-green fruit)
# This creates a 100x100 pixel image that is brownish-green.
image = np.zeros((100, 100, 3), dtype=np.uint8)
image[:, :, 0] = 160  # Red channel
image[:, :, 1] = 180  # Green channel
image[:, :, 2] = 60   # Blue channel
image_label = "Jackfruit"

# 2. Display the image
print(f"Generating an image of a '{image_label}'...")
plt.imshow(image)
plt.title(f"Example of a {image_label}")
plt.axis('off')  # Hide the axes for a cleaner look
plt.show()

# 3. Print a simple result
print(f"\nExample Prediction:")
print(f"The image is a {image_label} with a high confidence.")

